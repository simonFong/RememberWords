package com.simon.rememberwords.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.simon.rememberwords.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bookname = new Property(1, String.class, "bookname", false, "BOOKNAME");
        public final static Property SumWordNum = new Property(2, int.class, "sumWordNum", false, "SUM_WORD_NUM");
        public final static Property PassRate = new Property(3, double.class, "passRate", false, "PASS_RATE");
        public final static Property SumWeight = new Property(4, int.class, "sumWeight", false, "SUM_WEIGHT");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOKNAME\" TEXT," + // 1: bookname
                "\"SUM_WORD_NUM\" INTEGER NOT NULL ," + // 2: sumWordNum
                "\"PASS_RATE\" REAL NOT NULL ," + // 3: passRate
                "\"SUM_WEIGHT\" INTEGER NOT NULL );"); // 4: sumWeight
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOOK_BOOKNAME_DESC ON \"BOOK\"" +
                " (\"BOOKNAME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
        stmt.bindLong(3, entity.getSumWordNum());
        stmt.bindDouble(4, entity.getPassRate());
        stmt.bindLong(5, entity.getSumWeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
        stmt.bindLong(3, entity.getSumWordNum());
        stmt.bindDouble(4, entity.getPassRate());
        stmt.bindLong(5, entity.getSumWeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookname
            cursor.getInt(offset + 2), // sumWordNum
            cursor.getDouble(offset + 3), // passRate
            cursor.getInt(offset + 4) // sumWeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSumWordNum(cursor.getInt(offset + 2));
        entity.setPassRate(cursor.getDouble(offset + 3));
        entity.setSumWeight(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
